type: edu
files:
- name: main.py
  visible: true
  text: |
    # write your code here
    import numpy as np


    def gini(array: list):
        """Calculate the gini impurity for a given array

        Args:
            array: list

        Returns:
            float: the gini impurity value
        """
        array = np.array(array).astype(int)
        probability_1 = array.sum() / array.size
        probability_0 = 1 - probability_1

        return 1 - (np.square(probability_0) + np.square(probability_1))


    def weighted_gini(split_one: list, split_two: list):
        """Calculate the weighted gini impurity

        Args:
            split_one(list): a split from a given dataset
            split_two(list): another split from a given dataset

        Returns:
            float: the value of weighted gini impurity value
        """
        first_size = len(split_one)
        second_size = len(split_two)
        total_size = first_size + second_size

        return (first_size / total_size * gini(split_one)) \
                        + (second_size / total_size * gini(split_two))


    array = input().split()
    split_one = input().split()
    split_two = input().split()

    print(np.round(gini(array), 2), np.round(weighted_gini(split_one, split_two), 2))
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import *
    import ast

    ANSWER = [0.3, 'Fare', 8.662, [1, 2], [0, 3, 4, 5, 6, 7, 8, 9]]


    class SplitNumTest(StageTest):

        @dynamic_test
        def test(self):
            pr = TestedProgram()
            pr.start()
            if not pr.is_waiting_input():
                raise WrongAnswer("You program should input the path to the file")
            output = pr.execute("test/data_stage7.csv").strip().replace(", ", ",")
            output = [x.strip() for x in output.split()]
            if len(output) != 5:
                raise WrongAnswer("Your answer should contain five items split by a space: a float, a string, an integer, "
                                  "and two lists.")

            # checking the first item
            try:
                user_gini = float(output[0])
            except Exception:
                raise WrongAnswer("The first value should be a float.")
            if user_gini != ANSWER[0]:
                raise WrongAnswer("Wrong Gini score (the first item in your answer).")

            # checking the second item
            if output[1] != ANSWER[1]:
                raise WrongAnswer("Wrong threshold feature (the second item in your answer).")

            # checking the third item
            try:
                user_split_value = ast.literal_eval(output[2])
            except Exception:
                raise WrongAnswer("The third value should be either an integer or a float.")
            if not isinstance(user_split_value, (int, float)):
                raise WrongAnswer("The third value should be either an integer or a float.")
            err = ANSWER[2] * 0.02
            if not ANSWER[2] - err <= user_split_value <= ANSWER[2] + err:
                raise WrongAnswer("Wrong threshold value (the third item in your answer).")

            # checking the forth and the fifth item
            for i, ans, node in zip([0, 1], output[3:], ["left", "right"]):
                index_from = ans.find('[')
                index_to = ans.find(']')
                list_str = ans[index_from: index_to + 1]
                try:
                    user_list = ast.literal_eval(list_str)
                except Exception:
                    return CheckResult.wrong(
                        f"Seems that the {4 + i}th item of your output is in wrong format. The list is expected.")

                if not isinstance(user_list, list):
                    return CheckResult.wrong(f'Print the {4 + i}th item as a list')
                if user_list != ANSWER[3 + i]:
                    raise WrongAnswer(f"Wrong list of {node} node indexes (the {4 + i}th item in your answer).")

            return CheckResult.correct()


    if __name__ == '__main__':
        SplitNumTest().run_tests()
  learner_created: false
- name: test/data_stage6_train.csv
  visible: true
  learner_created: true
- name: test/data_stage6_test.csv
  visible: true
  learner_created: true
- name: test/data_stage6_train-BitzsSpace.csv
  visible: true
  learner_created: false
- name: test/data_stage6_test-BitzsSpace.csv
  visible: true
  learner_created: false
- name: test/data_stage7.csv
  visible: false
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/20215#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 12 Oct 2022 02:15:12 UTC
record: 6
