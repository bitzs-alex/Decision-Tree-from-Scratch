type: edu
files:
- name: main.py
  visible: true
  text: |
    # write your code here
    import numpy as np


    def gini(array: list):
        """Calculate the gini impurity for a given array

        Args:
            array: list

        Returns:
            float: the gini impurity value
        """
        array = np.array(array).astype(int)
        probability_1 = array.sum() / array.size
        probability_0 = 1 - probability_1

        return 1 - (np.square(probability_0) + np.square(probability_1))


    def weighted_gini(split_one: list, split_two: list):
        """Calculate the weighted gini impurity

        Args:
            split_one(list): a split from a given dataset
            split_two(list): another split from a given dataset

        Returns:
            float: the value of weighted gini impurity value
        """
        first_size = len(split_one)
        second_size = len(split_two)
        total_size = first_size + second_size

        return (first_size / total_size * gini(split_one)) \
                        + (second_size / total_size * gini(split_two))


    array = input().split()
    split_one = input().split()
    split_two = input().split()

    print(np.round(gini(array), 2), np.round(weighted_gini(split_one, split_two), 2))
  learner_created: false
- name: test/data_stage6_test.csv
  visible: false
  learner_created: false
- name: test/data_stage6_train.csv
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from hstest import *


    ANSWER = [0.554, 0.612, 0.857, 0.948]

    # in ANSWER there are lower and upper bounds
    # the correct answer is 0.583, 0.903


    class Eval1Test(StageTest):

        @dynamic_test
        def test(self):
            pr = TestedProgram()
            pr.start()
            if not pr.is_waiting_input():
                raise WrongAnswer("You program should input two paths to the files split by space")
            output = pr.execute("test/data_stage6_train.csv test/data_stage6_test.csv").strip()
            try:
                res = [round(float(x), 3) for x in output.split()]
            except Exception:
                raise WrongAnswer("You should print two float values split with space.")
            if len(res) != 2:
                raise WrongAnswer("Wrong number of values. Print two numbers: true positives and true negatives normalized over the true rows.")
            if not (ANSWER[0] <= res[0] <= ANSWER[1]):
                raise WrongAnswer("Wrong true positives value (the first value).")
            if not (ANSWER[2] <= res[1] <= ANSWER[3]):
                raise WrongAnswer("Wrong true negatives value (the second value).")
            return CheckResult.correct()


    if __name__ == '__main__':
        Eval1Test().run_tests()

  learner_created: false
feedback_link: https://hyperskill.org/projects/259/stages/1312/implement#comment
status: Unchecked
record: -1
