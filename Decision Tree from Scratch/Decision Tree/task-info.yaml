type: edu
files:
- name: main.py
  visible: true
  text: |
    # write your code here
    import numpy as np


    def gini(array: list):
        """Calculate the gini impurity for a given array

        Args:
            array: list

        Returns:
            float: the gini impurity value
        """
        array = np.array(array).astype(int)
        probability_1 = array.sum() / array.size
        probability_0 = 1 - probability_1

        return 1 - (np.square(probability_0) + np.square(probability_1))


    def weighted_gini(split_one: list, split_two: list):
        """Calculate the weighted gini impurity

        Args:
            split_one(list): a split from a given dataset
            split_two(list): another split from a given dataset

        Returns:
            float: the value of weighted gini impurity value
        """
        first_size = len(split_one)
        second_size = len(split_two)
        total_size = first_size + second_size

        return (first_size / total_size * gini(split_one)) \
                        + (second_size / total_size * gini(split_two))


    array = input().split()
    split_one = input().split()
    split_two = input().split()

    print(np.round(gini(array), 2), np.round(weighted_gini(split_one, split_two), 2))
  learner_created: false
- name: test/data_stage4.csv
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest import *


    ANSWER = ["Made split: Sex is 0", "Made split: Pclass is 2",
              "Made split: Pclass is 1", "Made split: Pclass is 3"]


    class TreeTest(StageTest):

        @dynamic_test
        def test(self):
            pr = TestedProgram()
            pr.start()
            if not pr.is_waiting_input():
                raise WrongAnswer("You program should input the path to the file")
            output = pr.execute("test/data_stage4.csv").strip()
            res = output.split("\n")
            res = [x.strip() for x in res]
            if len(res) != 4:
                raise WrongAnswer("Wrong number of splits. Your model should make a split four times (on given data).")
            for i in range(4):
                if res[i] != ANSWER[i]:
                    raise WrongAnswer(f"Wrong log message on line {i+1}. Correct message template: 'Made split: Sex is 1'."
                                      "\nIt may be useful to check the traversal order in the recursive split function: go to the left child first.")
            return CheckResult.correct()


    if __name__ == '__main__':
        TreeTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/20212#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 11 Oct 2022 02:25:11 UTC
record: 3
